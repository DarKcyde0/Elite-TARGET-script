// Init vars used in script
int mRequestDock, mPowerPlant, mFastModeSwitch;
int mThrottleFwdOnly, mThrottleFullScale, mThrottlePrecision, mSplitThrottle;
int split = 0;  //Flag for mSplitThrottle
int LED_BAR_0, LED_BAR_1, LED_BAR_2, LED_BAR_3, LED_BAR_4, LED_BAR_5;


//SetSCurve(&Device, axis, left_deadzone%, center_deadzone%, right_deadzone%, curve(-20...20), scale);
//SetJCurve(&device, axis, physical axis value%, DirectX output value%);
//TrimDXAxis(axis, +/-1024) trim is additive, SET forces trim value, CURRENT reads axis.pos

int initJoystickAxis() {
	MapAxis(&Joystick, JOYX, DX_X_AXIS);
		SetSCurve(&Joystick, JOYX, 0, 0, 0, 0, 0);
	MapAxis(&Joystick, JOYY, DX_Y_AXIS);
		SetSCurve(&Joystick, JOYY, 0, 0, 0, 0, 0);
}

int SetThrottle() {  //Prevents throttle jumping around on mode change
	DXAxis(DX_Z_AXIS, -AxisVal(Throttle[THR_RIGHT], &axdata));
}

int initThrottleAxis() {
//	LED Backlight Control - AXMAP2 method
//	int LED_BRT_OFF, LED_BRT_1, LED_BRT_2, LED_BRT_3, LED_BRT_4, LED_BRT_5;
//	LED_BRT_OFF = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, 0));");
//	LED_BRT_1 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, 64));");
//	LED_BRT_2 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, 128));");
//	LED_BRT_3 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, 156));");
//	LED_BRT_4 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, 192));");
//	LED_BRT_5 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, 224));");
	// Friction Control sets backlight level on Shiftmode
	//KeyAxis (&Throttle, THR_FC, 'i', 
	//	AXMAP2(6, LED_BRT_5, LED_BRT_4, LED_BRT_3, LED_BRT_2, LED_BRT_1, LED_BRT_OFF));
	
	// LED bar on throttle, for giggles
	LED_BAR_0 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2-LED3-LED4-LED5));");
	LED_BAR_1 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2-LED3-LED4+LED5));");
	LED_BAR_2 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2-LED3+LED4+LED5));");
	LED_BAR_3 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_ONOFF, LED_CURRENT-LED1-LED2+LED3+LED4+LED5));");
	LED_BAR_4 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_ONOFF, LED_CURRENT-LED1+LED2+LED3+LED4+LED5));");
	LED_BAR_5 = EXEC("ActKey(PULSE+KEYON+LED (&Throttle, LED_ONOFF, LED_CURRENT+LED1+LED2+LED3+LED4+LED5));");
//	KeyAxis (&Throttle, THR_RIGHT, 'ioumd', 
//		AXMAP2(6, LED_BAR_0, LED_BAR_1,	LED_BAR_2, LED_BAR_3, LED_BAR_4, LED_BAR_5)	);
		
	MapAxis(&Throttle, THR_RIGHT, DX_Z_AXIS, AXIS_REVERSED);
	//configure throttle on Flap switch position
	if(Throttle[FLAPU]) EXEC("mThrottleFwdOnly");
	else if(Throttle[FLAPM]) EXEC("mThrottleFullScale");
	else EXEC("mThrottlePrecision");
	MapAxis(&Throttle, SCX, DX_XROT_AXIS);
		SetSCurve(&Throttle, SCX, 0, 0, 0, 4, 0);						//curve to tame the twitchy slew
	MapAxis(&Throttle, SCY, DX_YROT_AXIS);
		SetSCurve(&Throttle, SCY, 0, 0, 0, 4, 0);
	//MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_REVERSED);
		SetSCurve(&Throttle, THR_LEFT, 0, 10, 0, 0, 0);					//deadzone for bidirectional heave control
	MapAxis(&Throttle, THR_FC, DX_SLIDER_AXIS);
		SetSCurve(&Throttle, THR_FC, 0, 0, 0, 0, 0);

}


int initCustomCommands() {
	
	// Dock request
	mRequestDock = CHAIN(
		LOCK+PULSE+TargetPanel, D(),
		PULSE+UINextPanel, D(),
		PULSE+UINextPanel, D(),
		PULSE+UISelect, D(),
		PULSE+UIDown, D(),
		PULSE+UISelect, D(),
		PULSE+UIPrevPanel, D(),
		PULSE+UIPrevPanel, D(),
		PULSE+UIBack, LOCK
	);
	

	mFastModeSwitch = CHAIN(				// MACRO: Automated Game Mode Switching
		LOCK+PULSE+UIEscape, D(700),		// From Cockpit, it will navigate the Game Menu to put you back at the Game Mode selection screen automatically!
		PULSE+UIUp, D(400),
		PULSE+UIUp, D(400),
		PULSE+UISelect, D(500),
		PULSE+UIRight, D(250),
		PULSE+UISelect, D(5000),			// ** Depending on the load times of your PC, this value may need to be changed/increased (6000ms is default)
		PULSE+UIDown, D(500),
		PULSE+UISelect, LOCK
	);	

	// SelectPrevSubsystem x 6 (Targets Powerplant, or close to it)
	mPowerPlant = CHAIN(
		PULSE+SelectPrevSubsystem, D(),
		PULSE+SelectPrevSubsystem, D(),
		PULSE+SelectPrevSubsystem, D(),
		PULSE+SelectPrevSubsystem, D(),
		PULSE+SelectPrevSubsystem, D()
		//PULSE+SelectPrevSubsystem
	);

	// Trim first 50% of throttle movement
	mThrottleFwdOnly = EXEC(
		"TrimDXAxis(DX_Z_AXIS, SET(1024));"
		"SetSCurve(&Throttle, THR_RIGHT, 0, -100, 0, 0);"
		"SetThrottle();"
	);
	// Make throttle bi-directional, linear
	mThrottleFullScale = EXEC(
		"TrimDXAxis(DX_Z_AXIS, SET(0));"
		"SetSCurve(&Throttle, THR_RIGHT, 0, 5, 0, 0);"
		"SetThrottle();"
	);
	// Trim throttle to 1/3, bi-directional, with curve to make center less sensitive
	mThrottlePrecision = EXEC(
		"TrimDXAxis(DX_Z_AXIS, SET(0));" 
		"SetSCurve(&Throttle, THR_RIGHT, 0, 2, 0, 2, -3);"
		"SetThrottle();"
	);
	// Map Left Throttle to ThrustUp/Dn (toggle)
	// Separate throttles and move Left thr only to idle for toggle.
	mSplitThrottle = EXEC(
		"if (Throttle[IDLELON] & Throttle[IDLEROFF]) {"  //Check that only Left Thr is IDLE
			"if (!split) {"
				"MapAxis(&Throttle, THR_LEFT, DX_ZROT_AXIS, AXIS_REVERSED);"
				"split = 1;}"
			"else {"
				"MapAxis(&Throttle, THR_LEFT, 0);"
				"split = 0;}"
		"}"
	);
}

// =======================================================================================
// mPower() sets PIPs as requested
// Params = SYS, ENG, WEP, MID
// If no params, balances power.
// 1st Param gets 4 PIPs, balanced 1 PIP on others if no 2nd param
// 2nd Param gets 2 PIPs
// 3rd Param MID sets 3 PIPs each
// =======================================================================================
define SYS 1
define ENG 2
define WEP 3
define MID 4

int mPower(int x=0, int y=0, int z=0) {
	int PIPx, PIPy, PIPz;
	
	// Map out PIPs
	if (x == 0) PIPx = 0;
	else if (x == SYS) PIPx = PULSE+ PowerSys;
	else if (x == ENG) PIPx = PULSE+ PowerEng;
	else if (x == WEP) PIPx = PULSE+ PowerWep;
	
	
	if (y == 0) PIPy = 0;
	else if (y == SYS) PIPy = PULSE+ PowerSys;
	else if (y == ENG) PIPy = PULSE+ PowerEng;
	else if (y == WEP) PIPy = PULSE+ PowerWep;
	
	if (z == 0) PIPz = 0;
	else if (z == MID) PIPz = PIPy;
		
	// Send PIPs
	ActKey(KEYON+ CHAIN(
		PULSE+ BalancePower, D(),
		PIPx, D(),
		PIPy, D(),
		PIPx, D(),
		PIPx, D(),
		PIPz
	));
}