include "target.tmh" // Default system import
include "usb_keys.tmh" //USB Keycodes
include "EDKeyMap.ttm" // Key mapping
include "EDMacros.tmh" // Macros definition
include "SquareTheCircle.tmh"  //Joystick corner deadzone

define HOLD 350 // milliseconds
define JETTISON_CARGO_DELAY 2500 // milliseconds, recommend 2-3 seconds.


// Init vars
int TriggerWEP;

int main() {
	
	// Exclude missing devices
	Exclude(&HCougar);
	Exclude(&T16000);
	Exclude(&T16000L);
	Exclude(&LMFD);
	Exclude(&RMFD);
	Exclude(&TWCSThrottle);
	Configure(&TFRPRudder, MODE_FILTERED); // Enabled but filtered through EventHandle.

	if(Init(&EventHandle)) return 1;

	// Base settings
	SetKBRate(25, 75);  //PULSE ms, D() ms
	SetKBLayout(KB_ENG);
	ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, 43)); // Init LEDs, 0, 43, 86, 129, 172, 215
	SetShiftButton(&Joystick, S3, &Throttle, BSF, BSB); // Pinky for IO, Boat switch for UMD

	// Init see EDMacros.tmh
	initCustomCommands();
	initJoystickAxis();
	initThrottleAxis();
	
	// =======================================================================================
	// Map joystick
	// =======================================================================================
	if (Throttle[APPAT]) EXEC("TG1_AutoRepeat();");
	else EXEC("TG1_Norm();");
	
	if (Throttle[APALT]) EXEC("TG2_Pwr();");
	
	MapKeyRUMD(&Joystick, TG1,   //On Trigger release, check if TG2 pressed, redirect power to engines
		EXEC("if (TriggerWEP) { TriggerWEP = 0; mPower(ENG,WEP); }"),  //U
		EXEC("if (TriggerWEP) { TriggerWEP = 0; mPower(ENG); }"),      //M
		EXEC("if (TriggerWEP) { TriggerWEP = 0; mPower(ENG,SYS); }")   //D
		);
	
	//Mode 
	MapKeyIO(&Joystick, S1, 0, TEMPO(NextFireGroup, PrevFireGroup, HOLD)
	);
		
	//Pickle 
	MapKeyIO(&Joystick, S2, mFastModeSwitch, TEMPO(Chaff, PULSE+UseShieldCell, HOLD));
	//Pinky/Nose-wheel
	MapKey(&Joystick, S3, TEMPO(DisableFlightAssist, 0));  // Tap for FA Off, IO shift on hold
	//Paddle switch
	MapKey(&Joystick, S4, DX2);  // Holding Pickle for 2ndary fire is painful, the paddle is much easier.

	// China hat power control
	// Shift always sends single power press
	// Boat switch - UMD mode changes 2ndary power balance. U = offence, M = balanced, D = defence/retreat
	MapKeyIOUMD(&Joystick, H1U, 
		PULSE+PowerEng, //I U 
		TEMPO(EXEC("mPower(ENG,WEP);"), EXEC("mPower(WEP,SYS,MID);"), HOLD), //O U 
		PULSE+PowerEng, //I M  
		TEMPO(EXEC("mPower(ENG);"),  EXEC("mPower(WEP,SYS,MID);"), HOLD), //O M 
		PULSE+PowerEng, //I D 
		TEMPO(EXEC("mPower(ENG,SYS);"), EXEC("mPower(WEP,SYS,MID);"), HOLD) //O D
		); 
		
	MapKey(&Joystick, H1D, TEMPO(BalancePower, EXEC("mPower(WEP,SYS,MID);"), HOLD));
	
	MapKeyIOUMD(&Joystick, H1L, 
		PULSE+PowerSys, //I U 
		TEMPO(EXEC("mPower(SYS,WEP);"), EXEC("mPower(SYS,ENG,MID);"), HOLD), //O U 
		PULSE+PowerSys, //I M  
		TEMPO(EXEC("mPower(SYS);"),  EXEC("mPower(SYS,ENG,MID);"), HOLD), //O M 
		PULSE+PowerSys, //I D 
		TEMPO(EXEC("mPower(SYS,ENG);"), EXEC("mPower(SYS,ENG,MID);"), HOLD) //O D
		); 
	
	MapKeyIOUMD(&Joystick, H1R, 
		PULSE+PowerWep, //I U 
		TEMPO(EXEC("mPower(WEP,ENG);"), EXEC("mPower(WEP,ENG,MID);"), HOLD), //O U 
		PULSE+PowerWep, //I M  
		TEMPO(EXEC("mPower(WEP);"),  EXEC("mPower(WEP,ENG,MID);"), HOLD), //O M 
		PULSE+PowerWep, //I D 
		TEMPO(EXEC("mPower(WEP,SYS);"), EXEC("mPower(WEP,ENG,MID);"), HOLD) //O D
		); 
	
	//TMS
	MapKeyIO(&Joystick, H2U, PULSE+SelectHighestThreat, SelectTargetAhead);
	MapKey(&Joystick, H2D, SelectNextSystemInRoute);
	MapKey(&Joystick, H2L, PULSE+SelectPrevHostileShip);
	MapKey(&Joystick, H2R, PULSE+SelectNextHostileShip);

	//DMS Castle hat
	MapKeyIO(&Joystick, H3U, TargetWingmans_Target, PULSE+ SelectNextSubsystem);
	MapKeyIO(&Joystick, H3D, TargetWingman2, TEMPO(SelectPrevSubsystem, mPowerPlant, HOLD));
	MapKeyIO(&Joystick, H3L, TargetWingman3, SelectPrevShip);
	MapKeyIO(&Joystick, H3R, TargetWingman1, SelectNextShip);

	//CMS
	MapKey(&Joystick, H4U, UIUp);
	MapKey(&Joystick, H4D, UIDown);
	MapKeyIO(&Joystick, H4L, UIPrevPanel, UILeft);
	MapKeyIO(&Joystick, H4R, UINextPanel, UIRight);
	MapKeyIO(&Joystick, H4P, UIBack, UISelect);

	// =======================================================================================
	// Map throttle
	// =======================================================================================
	MapKey(&Throttle, MSU, ThrustUp);
	MapKey(&Throttle, MSD, ThrustDown);
	MapKey(&Throttle, MSL, ThrustLeft);
	MapKey(&Throttle, MSR, ThrustRight);
	MapKey(&Throttle, MSP, Microphone);
	
	//Hardpoints and FSD mutually exclusive, good for same switch
	MapKey(&Throttle, SPDF, mHardpoints);  
	MapKeyR(&Throttle, SPDF, mHardpoints);  //R keeps IO state of press, so we have to check shift explicitly instead of MapKeyRIO
	MapKeyIO(&Throttle, SPDB, WingNavLock, TEMPO(FrameShiftDrive, Supercruise, HOLD)); // When FSD target is blocked, Hold for Supercruise

	MapKey(&Throttle, BSF, 0); //UMD switch
	MapKey(&Throttle, BSM, 0);
	MapKey(&Throttle, BSB, 0);

	MapKey(&Throttle, CHF, SilentRunning);
	MapKey(&Throttle, CHB, PULSE+DeployHeatSink);

	MapKey(&Throttle, PSF, PULSE+ShipLights); 
	MapKey(&Throttle, PSM, PULSE+ShipLights);
	MapKey(&Throttle, PSB, PULSE+ShipLights);

	MapKey(&Throttle, LTB, EXEC("if (!Throttle[FLAPD]) ActKey(KEYON+EngineBoost);")); //Dont boost when landing/precise maneouvers
	MapKeyR(&Throttle, LTB, UP+EngineBoost);
	
	MapKey(&Throttle, SC, UIFocus); 

	MapKey(&Throttle, CSU, PULSE+UIEscape);
	MapKey(&Throttle, CSD, 0);
	MapKey(&Throttle, CSL, PULSE+SystemMap);
	MapKey(&Throttle, CSR, PULSE+GalaxyMap);

	
	MapKey(&Throttle, IDLELON, TEMPO(0, mSplitThrottle, HOLD));  //Needs delay, prevents accidental engagement.
	MapKey(&Throttle, IDLELOFF, 0);
	MapKey(&Throttle, IDLERON, BuggyEbrake);
	MapKey(&Throttle, IDLEROFF, 0);

	MapKey(&Throttle, EFLNORM, CHAIN(PULSE+PhotoCamera, D(),PULSE+UISelect));
	MapKeyR(&Throttle, EFLNORM, PULSE+PhotoCamera);
	MapKey(&Throttle, EFLOVER, 0);
	
	MapKey(&Throttle, EFRNORM, PULSE+ F8);  //Autohotkey activates Bigscreen
	MapKey(&Throttle, EFROVER, PULSE+ F9); //Autohotkey activates Elite

	MapKey(&Throttle, EOLIGN, 0);
	MapKey(&Throttle, EOLNORM, 0);
	MapKey(&Throttle, EOLMOTOR, 0);
	MapKey(&Throttle, EORIGN, mRequestDock); // Press up when full throttle!
	MapKey(&Throttle, EORNORM, 0);
	MapKey(&Throttle, EORMOTOR, 0);

	//MapKey(&Throttle, APUON, TEMPO(0, PULSE+JettisonAllCargo, JETTISON_CARGO_DELAY));  //Jettison Safety example
	MapKey(&Throttle, APUON, 0);
	MapKey(&Throttle, APUOFF, 0);

	MapKey(&Throttle, FLAPU, mThrottleFwdOnly);
	MapKey(&Throttle, FLAPM, mThrottleFullScale);
	MapKey(&Throttle, FLAPD, mThrottlePrecision);

	MapKey(&Throttle, LDGH, HMDReset);

	MapKeyIO(&Throttle, EACON, 0, PULSE+LandingGear);  //shift disables if out of sync
	MapKeyIO(&Throttle, EACOFF, 0, PULSE+LandingGear);

	MapKey(&Throttle, RDRNRM, 0);
	MapKey(&Throttle, RDRDIS, CargoScoop);

	MapKey(&Throttle, APENG, EXEC("EngageAPkey();"));
	MapKey(&Throttle, APDIS, 0);  //Key release

	MapKey(&Throttle, APPAT, EXEC("TG1_AutoRepeat();"));  //Mode select for APENG _and_ Trigger mode control
	MapKey(&Throttle, APAH, EXEC("TG1_Norm();"));
	MapKey(&Throttle, APALT, EXEC("TG2_Pwr();"));
	
	//must do this inside main()
    SetSCurve(&TFRPRudder, TRPRIGHT, 0, 0, 20, 0, 0); //Right Toe Brake
    SetSCurve(&TFRPRudder, TRPLEFT, 0, 0, 20, 0, 0); //Left Toe Brake

}  // end main()



int EventHandle(int type, alias o, int x) {
	int LED_BRT, TRPCOMBO, Differential_Toe;

	// LED backlight control - press S3 + THR_FC axis.
	if (&o == &Throttle & x == THR_FC & Joystick[S3]) {
		LED_BRT = (AxisVal(Throttle[THR_FC], &axdata) - 32766) / 256 * -1;
		ActKey(PULSE+KEYON+LED (&Throttle, LED_INTENSITY, LED_BRT));
	}
	
	// Old Combine rudder toe brakes into new axis, mapped to DX_THROTTLE_AXIS
//	if (&o == &TFRPRudder & (x == TRPLEFT | x == TRPRIGHT)) {
//		if (TFRPRudder[TRPLEFT] < TFRPRudder[TRPRIGHT]) TRPCOMBO = TFRPRudder[TRPRIGHT];
//		else TRPCOMBO = TFRPRudder[TRPLEFT];
//		GameOutput (&o, TRPLEFT, -TRPCOMBO);
//	}
	
	//Map the MODE_FILTERED TFRP through Target; we can Trim, set deadzones, J/Scurves, etc.
	//X axis = Differential combined toe brakes, rest at center
	//Y axis = Both toe brakes pressed at same time, rest at 0
	//Z axis = rudder (as default)
	if (&o == &TFRPRudder) {  
		GetAxisData(&o, x);
		axdata.val = AxisVal(o[x], &axdata);
		//if(x == TRPLEFT | x == TRPRIGHT) axdata.val = -axdata.val;  //Reverse the Toe Brakes, TM why u do dis??
		if(x == TRPLEFT | x == TRPRIGHT) {
			axdata.locked = 1;
			Differential_Toe = -TFRPRudder[TRPRIGHT]/2 + TFRPRudder[TRPLEFT]/2;
			//Differential_Toe = AxisVal(Differential_Toe, &axdata);
			GameOutput(&o, TRPRIGHT, Differential_Toe);
			
			if (TFRPRudder[TRPLEFT] < TFRPRudder[TRPRIGHT]) TRPCOMBO = TFRPRudder[TRPRIGHT];
			else TRPCOMBO = TFRPRudder[TRPLEFT];
			TRPCOMBO = AxisVal(TRPCOMBO, &axdata);
			GameOutput (&o, TRPLEFT, -TRPCOMBO);
		}
		//axdata.locked = 1;  //Uncomment to disable pedals but keep TRPCOMBO axis
		if(!axdata.locked & !axdata.relative) GameOutput(&o, x, axdata.val);
	}
	
	//SquareTheCircle Joystick code
	if (&o == &Joystick & (x == JOYX | x == JOYY)) {
		SquareTheCircle(&o, x, JOYX, JOYY);
	}

	else DefaultMapping(&o, x);
}
